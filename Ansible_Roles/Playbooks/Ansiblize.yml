---
- name: Ansiblize Managed Hosts   ### Play to connect to all managed nodes in inventory and setup systems to be managed by Ansible
  hosts: all

### Creation of Variables for the playbook's plays and tasks.
### This will define variables allowing the playbook to be reused easier
  vars_files:
    # Contains variables for the Ansible User Creation
    - variables.yml

### Creation of Variables for plays and tasks the are locally seclectable

  vars:
    ssh_key_file_data: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSmPWK8JpLCWn2LhjoR1Rdvb6NUbQdhqQAoZ15+OWNjCEmVZV9pReuPmCmM1uiAz+NlExvjpF3uxPeKf7Z5GqoVO/YzP5KFqPSH6J0TpxilBc+5uSJnZoS+9oB+0jFVT5hpb99ZT85mLEsSoOLDlposy8SAunr8w5JhaaIuz7Is+GDPejuAtCEQmEcDJJl4IPnxt6X0YJ+NZQDt2mkWuSP2EIsl470LNu9OAUN19JfJe56PcjUoqedu+IXyjP16d+GldjaV1aomnTZKxLvmDTkCDO56H88bhQWX4XUvyystf/E1Bji72cWy57kwf93Jblh2DE6Vu8d6COkNHckQCHl ansible-user@workstation.lab.example.com
    ssh_key_answer: yes

### These variables can only be yes/no and must be kept in quotation marks "" to avoid being turned into boolean true/false
### values. There is some testing in the playbook to prevent SSH service from restarting, but you will still need to fix
### the SSHD_CONFIG file before restarting the service.
    ssh_root_allowed: "yes"
    ssh_passwords_allowed: "yes"

  tasks:

    ### Create the Ansible User
    - name: Create Ansible User
      user:
        name: "{{ ansible_user_name }}"
        state: present
        shell: /bin/bash
        comment: Ansible User for System


    ### Create the Ansible User
    - name: Create Ansible User Password (if required)
      shell: echo {{ ansible_user_password }} | passwd {{ ansible_user_name }} --stdin
      when: ansible_user_password is defined

    ### Copy Ansible User Public SSH Keys (if defined)
    ### This will take the public key and set as the authorized_key from the current user
    ### Only works if the current user/remote user is the same as user being created
    - name: Copy Ansible User SSH Keys
      authorized_key:
        user: "{{ ansible_user_name }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
      when: ssh_key_file_data is not defined and ssh_key_answer

    ### Copy Ansible User Public SSH Keys from file (if defined)
    ### This will take the public key specified and set as and authorized_key for the user specified
    - name: Copy Ansible User SSH Keys
      authorized_key:
        user: "{{ ansible_user_name }}"
        state: present
        key: "{{ ssh_key_file_data }}"
      when: ssh_key_file_data is defined

    ### Modify Sudoers to Allow Passwordless SUDO
    - name: Create Ansible User SUDOERS Entry
      copy:
        content: "{{ ansible_user_name }} ALL=(ALL) NOPASSWD:ALL\n"
        dest: /etc/sudoers.d/{{ ansible_user_name }}


    ### Modify SSH_CONFIG to permit SSH Key ONLY Access (no passwords)
    - name: Prevent Password Login via SSH (if required)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: PasswordAuthentication {{ ssh_passwords_allowed }}
        backup: yes
      when:  ssh_passwords_allowed is defined
      register: ssh_password_login
      notify:
        - Restart SSHD

    ### Modify SSH_CONFIG to prevent Root Login
    - name: Prevent Root Login via SSH (if required)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: PermitRootLogin {{ ssh_root_allowed }}
        backup: yes
      when: ssh_root_allowed is defined
      register: ssh_root_login
      notify:
        - Restart SSHD

    ### Test the SSHD Config File
    ### Technically this will exit out and break the Ansible playbook if it fails
    - name: Test SSHD Config File
      shell: sshd -t
      when: ssh_root_login.changed or ssh_password_login.changed
      register: sshd_results
      ignore_errors: yes

    ### Test the SSHD Config File
    - name: Test SSHD Config File Debug Output
      debug:
        var: sshd_results

    ### Test the SSHD Config File
    - name: Test SSHD Config File Debug Output
      debug:
        msg: The SSHD_CONFIG file is broken. Please fix the file as there is an issue with either the line with "PermitRootLogin" or the line with "PasswordAuthentication". The specific issue is {{ sshd_results.stderr_lines }}
      when:
        - sshd_results.rc != 0 or sshd_results.rc is not defined
        - sshd_results.changed



  handlers:

    ### Restart SSHD if Config File was Changed
    - name: Restart SSHD
      systemd:
        name: sshd
        state: restarted
      when: sshd_results.rc==0
